head
  style
    include ../stylesheets/basic.css
    include ../stylesheets/create-task.css
    include ../stylesheets/dashboard.css
    include ../stylesheets/task.css
    include ../stylesheets/popup-notification.css
  include ./partials/topbar.pug
  include ./partials/message.pug
  script(src='./socket.io/socket.io.js')
  script
    include ../scripts/jquery.js
    include ../scripts/taskHandler.js
    include ../scripts/createTask.js
    include ../scripts/taskSocket.js
  script.

    $('document').ready(function(){

      function updateFilteredTasks(ft){
        filtered_tasks = ft;
      }
      
      var tasks = !{JSON.stringify(tasks)};
      var filtered_tasks = [];
      var known_associates = !{JSON.stringify(known_associates)};
      var supes = !{JSON.stringify(subs)};
      var subs = !{JSON.stringify(subs)};
      var tags = [];  
      var filters = !{JSON.stringify(filters)};
      var active_filter = !{JSON.stringify(active_filter)};

      var self_id = "#{id}";
      var socket = initializeSocket(self_id);

      const rtf = renderTaskFilter(tasks, filtered_tasks, self_id, known_associates, socket, filters, active_filter);
      $('#rtf-container').append(rtf);

      socket.on('new-filter-saved', function(filter){
        filters.push(filter);
        updateFilters(filters);
        console.log('new filter:', filter);
      })

      socket.on('filter-updated', function(filter){
        let oldFilter = filters.find((f)=>f.name==filter.name)
        filters.splice(filters.indexOf(oldFilter), 1, filter);

        updateFilters(filters);
        console.log('edited filter:', filter);
      })

      socket.on('task-edit', function(task){
        console.log('\ntaskView.pug - task was edited:', task)
        if (tasks.find((t)=>t._id==task._id)) {
          let oldTask = tasks.find((t)=>t._id==task._id);
          if (oldTask.showChildren) task.showChildren=true;
          
          tasks.splice(tasks.indexOf(tasks.find((el) => el._id == task._id)), 1, task);
          updateTasks(tasks);

        } else {
          //- if edited task was NOT previously in tasks
          tasks.push(task);
          updateTasks(tasks);
        }
        filterTasks(); 
      })

      socket.on('new-subtask', function(subtask) {
        tasks.push(subtask);
        updateTasks(tasks);
        let parent = tasks.find((t)=>t._id==subtask.parentTask);
        let parentEl = getTaskEl(parent._id);
      });

      socket.on('new-task', function(task){
        tasks.push(task);
        updateTasks(tasks);
        filterTasks();        
      })

      socket.on('delete-task', function(task){
        let check = tasks.length;
        let deletedTask = tasks.find((t)=>t._id==task._id);
        tasks = tasks.filter(function(t){
          return t!=deletedTask;
        })
        updateTasks(tasks);
        filterTasks();
      });

      $('.create-task').click(function(){
        addTaskBox(id, socket, supes, known_associates, subs);
      });

    })

body    

  +topbar(name, unreadNotifications)
  +message(messages)
  #control-bar
    #rtf-container
    #create-task-container
      .create-task + Create Task +
  .separation-bar
  #task-view 

